---
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/Card.astro';
import Button from '../../components/Button.astro';
import Table from '../../components/Table.astro';
import Alert from '../../components/Alert.astro';
import { sql } from '../../utils/db';

// Handle form submissions for edit and delete
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const action = formData.get('action');
  
  if (action === 'delete') {
    const sampleId = formData.get('sample_id');
    try {
      // Delete results first (foreign key constraint)
      await sql`DELETE FROM results WHERE sample_id = ${sampleId}`;
      // Then delete sample
      await sql`DELETE FROM samples WHERE id = ${sampleId}`;
      
      return Astro.redirect('/admin/samples?success=deleted');
    } catch (error) {
      console.error('Error deleting sample:', error);
      return Astro.redirect('/admin/samples?error=delete-failed');
    }
  }
}

// Get query parameters
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') || '1');
const siteSlug = url.searchParams.get('site') || '';
const dateFrom = url.searchParams.get('from') || '';
const dateTo = url.searchParams.get('to') || '';
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');

const pageSize = 20;
const offset = (page - 1) * pageSize;

// Build query conditions
let whereConditions = [];
let queryParams = [];
let paramIndex = 1;

if (siteSlug) {
  whereConditions.push(`st.slug = $${paramIndex}`);
  queryParams.push(siteSlug);
  paramIndex++;
}

if (dateFrom) {
  whereConditions.push(`s.sampled_at >= $${paramIndex}`);
  queryParams.push(dateFrom);
  paramIndex++;
}

if (dateTo) {
  whereConditions.push(`s.sampled_at <= $${paramIndex}`);
  queryParams.push(dateTo + ' 23:59:59');
  paramIndex++;
}

const whereClause = whereConditions.length > 0 ? 'WHERE ' + whereConditions.join(' AND ') : '';

// Get samples with pagination
let samples = [];
let totalSamples = 0;
let sites = [];

try {
  // Get sites for filter dropdown
  sites = await sql`
    SELECT slug, name 
    FROM sites 
    ORDER BY name
  `;

  // Get total count for pagination
  const countQuery = `
    SELECT COUNT(*) as count
    FROM samples s
    JOIN sites st ON s.site_id = st.id
    ${whereClause}
  `;
  
  const countResult = await sql.unsafe(countQuery, queryParams);
  totalSamples = countResult && countResult[0] ? parseInt(countResult[0].count) : 0;

  // Get samples with results
  const samplesQuery = `
    SELECT 
      s.id,
      s.sampled_at,
      s.rainfall_24h_mm,
      s.rainfall_72h_mm,
      s.notes,
      st.name as site_name,
      st.slug as site_slug,
      r1.value as e_coli,
      r2.value as enterococci
    FROM samples s
    JOIN sites st ON s.site_id = st.id
    LEFT JOIN results r1 ON s.id = r1.sample_id AND r1.param = 'e_coli'
    LEFT JOIN results r2 ON s.id = r2.sample_id AND r2.param = 'intestinal_enterococci'
    ${whereClause}
    ORDER BY s.sampled_at DESC
    LIMIT ${pageSize} OFFSET ${offset}
  `;
  
  samples = await sql.unsafe(samplesQuery, queryParams);

} catch (error) {
  console.error('Error loading samples:', error);
}

const totalPages = Math.ceil(totalSamples / pageSize);

function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: '2-digit', 
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function getResultClass(value: number): string {
  if (value < 100) return 'text-green-700 bg-green-50';
  if (value < 1000) return 'text-yellow-700 bg-yellow-50';
  return 'text-red-700 bg-red-50';
}
---

<Layout title="Manage Samples - Admin">
  <main class="max-w-7xl mx-auto px-4 py-8">
    <!-- Page Header -->
    <header class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold tracking-tight text-gray-900 mb-2">
            Sample Management
          </h1>
          <p class="text-gray-600">
            View, edit, and manage water quality samples.
          </p>
        </div>
        <Button href="/admin/log-sample">
          Log New Sample
        </Button>
      </div>
    </header>

    <!-- Messages -->
    {successMessage && (
      <Alert type="success" dismissible={true} class="mb-6">
        {successMessage === 'deleted' && 'Sample deleted successfully!'}
        {successMessage === 'updated' && 'Sample updated successfully!'}
      </Alert>
    )}

    {errorMessage && (
      <Alert type="error" dismissible={true} class="mb-6">
        {errorMessage === 'delete-failed' && 'Failed to delete sample. Please try again.'}
      </Alert>
    )}

    <!-- Filters -->
    <Card class="mb-6">
      <h2 class="text-lg font-semibold text-gray-900 mb-4">Filter Samples</h2>
      
      <form method="GET" class="grid md:grid-cols-4 gap-4">
        <div>
          <label for="site" class="block text-sm font-medium text-gray-700 mb-1">
            Site
          </label>
          <select 
            id="site" 
            name="site" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
          >
            <option value="">All Sites</option>
            {sites.map(site => (
              <option value={site.slug} selected={siteSlug === site.slug}>
                {site.name}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label for="from" class="block text-sm font-medium text-gray-700 mb-1">
            From Date
          </label>
          <input 
            type="date" 
            id="from" 
            name="from" 
            value={dateFrom}
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
          />
        </div>

        <div>
          <label for="to" class="block text-sm font-medium text-gray-700 mb-1">
            To Date
          </label>
          <input 
            type="date" 
            id="to" 
            name="to" 
            value={dateTo}
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
          />
        </div>

        <div class="flex items-end gap-2">
          <Button type="submit" variant="secondary" size="sm">
            Filter
          </Button>
          <Button href="/admin/samples" variant="secondary" size="sm">
            Clear
          </Button>
        </div>
      </form>
    </Card>

    <!-- Results Summary -->
    <div class="mb-6 text-sm text-gray-600">
      Showing {samples.length} of {totalSamples} samples
      {siteSlug && ` from ${sites.find(s => s.slug === siteSlug)?.name}`}
      {(dateFrom || dateTo) && ` filtered by date`}
    </div>

    <!-- Samples Table -->
    <Card>
      {samples.length > 0 ? (
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr class="border-b border-gray-200">
                <th class="text-left py-3 px-4 font-medium text-gray-900">Date & Time</th>
                <th class="text-left py-3 px-4 font-medium text-gray-900">Site</th>
                <th class="text-left py-3 px-4 font-medium text-gray-900">E. coli (CFU/100ml)</th>
                <th class="text-left py-3 px-4 font-medium text-gray-900">Enterococci (CFU/100ml)</th>
                <th class="text-left py-3 px-4 font-medium text-gray-900">Rainfall</th>
                <th class="text-left py-3 px-4 font-medium text-gray-900">Actions</th>
              </tr>
            </thead>
            <tbody>
              {samples.map(sample => (
                <tr class="border-b border-gray-100 hover:bg-gray-50">
                  <td class="py-3 px-4">
                    <div class="text-sm">
                      {formatDate(sample.sampled_at)}
                    </div>
                  </td>
                  <td class="py-3 px-4">
                    <div class="font-medium text-gray-900">{sample.site_name}</div>
                  </td>
                  <td class="py-3 px-4">
                    {sample.e_coli ? (
                      <span class={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getResultClass(sample.e_coli)}`}>
                        {sample.e_coli}
                      </span>
                    ) : (
                      <span class="text-gray-400 text-sm">N/A</span>
                    )}
                  </td>
                  <td class="py-3 px-4">
                    {sample.enterococci ? (
                      <span class={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getResultClass(sample.enterococci)}`}>
                        {sample.enterococci}
                      </span>
                    ) : (
                      <span class="text-gray-400 text-sm">N/A</span>
                    )}
                  </td>
                  <td class="py-3 px-4">
                    <div class="text-sm text-gray-600">
                      {sample.rainfall_24h_mm ? `24h: ${sample.rainfall_24h_mm}mm` : ''}
                      {sample.rainfall_24h_mm && sample.rainfall_72h_mm && <br />}
                      {sample.rainfall_72h_mm ? `72h: ${sample.rainfall_72h_mm}mm` : ''}
                      {!sample.rainfall_24h_mm && !sample.rainfall_72h_mm && 'N/A'}
                    </div>
                  </td>
                  <td class="py-3 px-4">
                    <div class="flex gap-2">
                      <Button 
                        href={`/admin/edit-sample?id=${sample.id}`}
                        variant="secondary" 
                        size="sm"
                      >
                        Edit
                      </Button>
                      <form method="POST" class="inline" onsubmit="return confirm('Are you sure you want to delete this sample? This action cannot be undone.')">
                        <input type="hidden" name="action" value="delete" />
                        <input type="hidden" name="sample_id" value={sample.id} />
                        <Button 
                          type="submit" 
                          variant="secondary" 
                          size="sm"
                          class="text-red-600 hover:text-red-700"
                        >
                          Delete
                        </Button>
                      </form>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <div class="text-center py-12">
          <div class="text-2xl mb-4">📊</div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No samples found</h3>
          <p class="text-gray-600 mb-4">
            {siteSlug || dateFrom || dateTo 
              ? 'Try adjusting your filters or clearing them to see all samples.'
              : 'Get started by logging your first sample.'
            }
          </p>
          <Button href="/admin/log-sample">
            Log New Sample
          </Button>
        </div>
      )}
    </Card>

    <!-- Pagination -->
    {totalPages > 1 && (
      <div class="mt-6 flex items-center justify-between">
        <div class="text-sm text-gray-600">
          Page {page} of {totalPages}
        </div>
        
        <div class="flex gap-2">
          {page > 1 && (
            <Button 
              href={`/admin/samples?page=${page - 1}${siteSlug ? `&site=${siteSlug}` : ''}${dateFrom ? `&from=${dateFrom}` : ''}${dateTo ? `&to=${dateTo}` : ''}`}
              variant="secondary" 
              size="sm"
            >
              Previous
            </Button>
          )}
          
          {page < totalPages && (
            <Button 
              href={`/admin/samples?page=${page + 1}${siteSlug ? `&site=${siteSlug}` : ''}${dateFrom ? `&from=${dateFrom}` : ''}${dateTo ? `&to=${dateTo}` : ''}`}
              variant="secondary" 
              size="sm"
            >
              Next
            </Button>
          )}
        </div>
      </div>
    )}

    <!-- Back to Dashboard -->
    <div class="mt-8 pt-6 border-t border-gray-200">
      <Button href="/admin/" variant="secondary">
        ← Back to Dashboard
      </Button>
    </div>
  </main>
</Layout>

<script>
  // Add confirmation dialog for delete buttons
  document.addEventListener('DOMContentLoaded', function() {
    const deleteButtons = document.querySelectorAll('form[onsubmit]');
    deleteButtons.forEach(form => {
      form.addEventListener('submit', function(e) {
        if (!confirm('Are you sure you want to delete this sample? This action cannot be undone.')) {
          e.preventDefault();
        }
      });
    });
  });
</script>