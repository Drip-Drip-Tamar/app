---
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/Card.astro';
import Button from '../../components/Button.astro';
import DatePicker from '../../components/DatePicker.astro';
import Alert from '../../components/Alert.astro';
import { sql } from '../../utils/db';

// Get available sites for the dropdown
let sites = [];
try {
  sites = await sql`
    SELECT id, slug, name 
    FROM sites 
    ORDER BY name
  `;
} catch (error) {
  console.error('Error loading sites:', error);
}

// Get current date for default value
const today = new Date().toISOString().split('T')[0];
---

<Layout title="Log Sample - Admin - Drip Drip Tamar">
  <main class="max-w-3xl mx-auto px-4 py-8">
    <!-- Navigation -->
    <nav class="mb-8">
      <div class="flex items-center gap-4">
        <a href="/admin/" class="text-primary hover:underline text-sm font-medium">
          ← Admin Dashboard
        </a>
        <span class="text-gray-300">|</span>
        <span class="text-sm text-gray-600">Log New Sample</span>
      </div>
    </nav>

    <!-- Page Header -->
    <header class="mb-8">
      <h1 class="text-3xl font-bold tracking-tight text-gray-900 mb-4">
        Log Water Quality Sample
      </h1>
      <p class="text-gray-600">
        Record bacterial test results and rainfall data for water quality monitoring.
      </p>
    </header>

    <!-- Help Alert -->
    <Alert type="info" class="mb-6">
      <strong>Quick Guide:</strong> 
      Fill in all fields carefully. E. coli and Enterococci readings are typically between 10-500 CFU/100ml. 
      Values over 1000 will show a warning for confirmation.
    </Alert>

    <!-- Sample Entry Form -->
    <Card>
      <form id="sampleForm" method="POST" action="/api/create-sample" class="space-y-6">
        <!-- Site Selection -->
        <div>
          <label for="site_id" class="block text-sm font-medium text-gray-700 mb-2">
            Sampling Site <span class="text-danger">*</span>
          </label>
          <select 
            id="site_id" 
            name="site_id" 
            required 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-primary"
          >
            <option value="">Select a site...</option>
            {sites.map(site => (
              <option value={site.id}>{site.name}</option>
            ))}
          </select>
        </div>

        <!-- Sample Date -->
        <DatePicker 
          name="sampled_at"
          label="Sample Date"
          value={today}
          max={today}
          required={true}
        />

        <!-- Bacterial Readings -->
        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label for="e_coli" class="block text-sm font-medium text-gray-700 mb-2">
              E. coli Reading <span class="text-danger">*</span>
            </label>
            <div class="relative">
              <input
                type="number"
                id="e_coli"
                name="e_coli"
                min="0"
                max="100000"
                step="0.01"
                required
                class="w-full px-3 py-2 pr-20 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="0"
              />
              <span class="absolute right-3 top-2 text-sm text-gray-500">CFU/100ml</span>
            </div>
            <p class="text-xs text-gray-500 mt-1">
              Typical range: 10-500 CFU/100ml. Values over 1000 indicate high contamination.
            </p>
          </div>

          <div>
            <label for="enterococci" class="block text-sm font-medium text-gray-700 mb-2">
              Enterococci Reading <span class="text-danger">*</span>
            </label>
            <div class="relative">
              <input
                type="number"
                id="enterococci"
                name="enterococci"
                min="0"
                max="100000"
                step="0.01"
                required
                class="w-full px-3 py-2 pr-20 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="0"
              />
              <span class="absolute right-3 top-2 text-sm text-gray-500">CFU/100ml</span>
            </div>
            <p class="text-xs text-gray-500 mt-1">
              Typical range: 10-200 CFU/100ml. Values over 400 indicate high contamination.
            </p>
          </div>
        </div>

        <!-- Rainfall Data -->
        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label for="rainfall_24h" class="block text-sm font-medium text-gray-700 mb-2">
              24-hour Rainfall
            </label>
            <div class="relative">
              <input
                type="number"
                id="rainfall_24h"
                name="rainfall_24h"
                min="0"
                max="500"
                step="0.1"
                class="w-full px-3 py-2 pr-12 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="0.0"
              />
              <span class="absolute right-3 top-2 text-sm text-gray-500">mm</span>
            </div>
            <p class="text-xs text-gray-500 mt-1">
              Rainfall in the 24 hours before sampling. Leave blank if unknown.
            </p>
          </div>

          <div>
            <label for="rainfall_72h" class="block text-sm font-medium text-gray-700 mb-2">
              72-hour Rainfall
            </label>
            <div class="relative">
              <input
                type="number"
                id="rainfall_72h"
                name="rainfall_72h"
                min="0"
                max="1500"
                step="0.1"
                class="w-full px-3 py-2 pr-12 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="0.0"
              />
              <span class="absolute right-3 top-2 text-sm text-gray-500">mm</span>
            </div>
            <p class="text-xs text-gray-500 mt-1">
              Total rainfall in the 72 hours before sampling. Leave blank if unknown.
            </p>
          </div>
        </div>

        <!-- Sample Notes -->
        <div>
          <label for="notes" class="block text-sm font-medium text-gray-700 mb-2">
            Sample Notes
          </label>
          <textarea
            id="notes"
            name="notes"
            rows={3}
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary focus:border-primary"
            placeholder="Any additional observations about the sample or conditions..."
          ></textarea>
          <p class="text-xs text-gray-500 mt-1">
            Optional notes about weather conditions, water appearance, or testing conditions.
          </p>
        </div>

        <!-- Form Actions -->
        <div class="flex items-center justify-between pt-6 border-t border-gray-200">
          <Button 
            href="/admin/"
            variant="secondary"
            type="button"
          >
            Cancel
          </Button>
          
          <div class="flex gap-3">
            <Button 
              type="button"
              variant="secondary"
              onclick="saveDraft()"
            >
              Save Draft
            </Button>
            <Button type="submit">
              Log Sample
            </Button>
          </div>
        </div>
      </form>
    </Card>

    <!-- Recent Samples Reference -->
    <Card class="mt-8">
      <h3 class="text-lg font-semibold text-gray-900 mb-4">
        Recent Samples (Reference)
      </h3>
      <div class="text-sm text-gray-600">
        <p class="mb-2">Check recent entries to ensure consistency:</p>
        <div id="recentSamples" class="text-xs">
          Loading recent samples...
        </div>
      </div>
    </Card>
  </main>

  <!-- Confirmation Modal for High Values -->
  <div id="highValueModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-md mx-4">
      <h3 class="text-lg font-semibold text-gray-900 mb-4">⚠️ High Reading Detected</h3>
      <p class="text-gray-600 mb-4">
        One or more readings are unusually high (>1000 CFU/100ml). Please double-check your values.
      </p>
      <div id="highValueDetails" class="bg-yellow-50 p-3 rounded mb-4 text-sm"></div>
      <div class="flex gap-3">
        <Button variant="secondary" onclick="closeHighValueModal()">
          Review Values
        </Button>
        <Button onclick="submitFormConfirmed()">
          Submit Anyway
        </Button>
      </div>
    </div>
  </div>
</Layout>

<script>
  let formData = null;

  // Form validation and submission
  document.getElementById('sampleForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    formData = new FormData(this);
    const eColiValue = parseFloat(formData.get('e_coli')) || 0;
    const enteroValue = parseFloat(formData.get('enterococci')) || 0;
    
    // Check for high values
    if (eColiValue > 1000 || enteroValue > 1000) {
      showHighValueModal(eColiValue, enteroValue);
      return;
    }
    
    submitForm();
  });

  function showHighValueModal(eColi, entero) {
    const details = document.getElementById('highValueDetails');
    const warnings = [];
    
    if (eColi > 1000) warnings.push(`E. coli: ${eColi} CFU/100ml`);
    if (entero > 1000) warnings.push(`Enterococci: ${entero} CFU/100ml`);
    
    details.innerHTML = 'High readings:<br>' + warnings.join('<br>');
    document.getElementById('highValueModal').classList.remove('hidden');
  }

  function closeHighValueModal() {
    document.getElementById('highValueModal').classList.add('hidden');
  }

  function submitFormConfirmed() {
    closeHighValueModal();
    submitForm();
  }

  async function submitForm() {
    try {
      const response = await fetch('/api/create-sample', {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        // Success - redirect to admin dashboard
        window.location.href = '/admin/?success=sample-logged';
      } else {
        const error = await response.text();
        alert('Error logging sample: ' + error);
      }
    } catch (error) {
      alert('Network error: ' + error.message);
    }
  }

  function saveDraft() {
    const formData = new FormData(document.getElementById('sampleForm'));
    const draft = Object.fromEntries(formData);
    localStorage.setItem('sampleDraft', JSON.stringify(draft));
    alert('Draft saved locally');
  }

  // Load draft on page load
  document.addEventListener('DOMContentLoaded', function() {
    const draft = localStorage.getItem('sampleDraft');
    if (draft) {
      const data = JSON.parse(draft);
      for (const [key, value] of Object.entries(data)) {
        const field = document.querySelector(`[name="${key}"]`);
        if (field) field.value = value;
      }
    }
    
    // Load recent samples for reference
    loadRecentSamples();
  });

  async function loadRecentSamples() {
    try {
      // This would call an API endpoint to get recent samples
      // For now, show a placeholder
      document.getElementById('recentSamples').innerHTML = 
        'Recent samples feature will be implemented with the samples management API.';
    } catch (error) {
      document.getElementById('recentSamples').innerHTML = 
        'Could not load recent samples.';
    }
  }
</script>